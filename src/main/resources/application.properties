spring.application.name=assistant

# ===============================================
# Configuración del Servidor Web
# ===============================================
server.port=8080

# ===============================================
# Configuración H2 Database (Persistencia)
# ===============================================
# H2 en memoria para el desarrollo
spring.datasource.url=jdbc:h2:mem:chatbotdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=password
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.jpa.hibernate.ddl-auto=update
# Habilita la consola web de H2 para inspeccionar la DB: http://localhost:8080/h2-console
spring.h2.console.enabled=true

# ===============================================
# Configuración de Spring Kafka (Aseguramiento)
# ===============================================
# CRÍTICO: Usamos el valor del broker embebido si existe, si no, usamos localhost:9092.
# Esto garantiza que el consumidor y el productor siempre encuentren el broker correcto.
spring.kafka.bootstrap-servers=${spring.embedded.kafka.brokers:localhost:9092}

# Configuración del Productor (Para el Controller y el KafkaResponseService)
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
# Configuración crítica para que Spring sepa qué tipo de clase deserializar (DTO)
spring.kafka.producer.properties.spring.json.add-type-headers=false

# Configuración del Consumidor (Para el IntentProcessingService)
spring.kafka.consumer.group-id=intent-processor-group
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
# Paquetes de confianza para deserializar los DTOs
spring.kafka.consumer.properties.spring.json.trusted.packages=com.galicia.assistant.dto.*, java.time.*



# ===============================================
# Configuración de API Externa
# ===============================================
# URL base para la API de OpenWeatherMap (ejemplo)
weather.api.base-url=http://api.openweathermap.org/data/2.5/weather
# ? IMPORTANTE: Reemplaza ESTE VALOR con tu clave API real de OpenWeatherMap
weather.api.key=e63c2e110b7c6f0e82c2deca160d222a
